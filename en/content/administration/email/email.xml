<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">

<section id="email">
  <title>Sending/Receiving emails</title>
  <section id="email-sending">
    <title>Sending emails</title>
    <section id="email-sending-sendmail">
      <title>Via Sendmail (default)</title>
      <para>
        OTRS can send out emails via
        <ulink url="http://www.sendmail.org/">Sendmail</ulink>,
        <ulink url="http://www.postfix.org/">Postfix</ulink>,
        <ulink url="http://www.qmail.org">Qmail</ulink> or
        <ulink url="http://www.exim.org">Exim</ulink>). The default configuration is to use Sendmail and should work out-of-the-box.
      </para>
      <para>You can configure the sendmail settings via the graphical configuration frontend (Framework::Core::Sendmail)</para>

    </section>
    <section id="email-sending-smtp">
      <title>Via SMTP server or smarthost</title>
      <para>
        OTRS can send emails via SMTP (
        <ulink url="http://www.ietf.org/rfc/rfc821.txt">Simple Mail Transfer Protocol / RFC 821</ulink>) or Secure SMTP. You will want to use this on non-UNIX platforms (e.g. Windows).
      </para>
      <para>
        The SMTP server settings can be configured via the SysConfig (Framework::Core::Sendmail). If you don't see SMTPS available as an option, the required Perl modules are missing. In that case, please refer to
        <link linkend="installation-of-perl-modules">"Installation of Perl modules required for OTRS"</link> for instructions.
      </para>

    </section>

  </section>
  <section id="email-receiving">
    <title>Receiving emails</title>
    <section id="email-receiving-pop3">
      <title>Mail accounts configured via the OTRS GUI</title>
      <para>OTRS is able to receive emails from POP3, POP3S, IMAP, and IMAPS mail accounts.</para>
      <para>Configure your mail accounts via the PostMaster Mail Accounts link on the Admin page.</para>
      <para>
        If a new mail account is to be created (see Figure below), then its mail server name, login name and password must be specified. Also, you need to select the mail server type, which can be POP3, POP3S, IMAP or IMAPS. If you don't see your server type available as an option, the required Perl modules are missing on your system. In that case, please refer to
        <link linkend="installation-of-perl-modules">"Installation of Perl modules required for OTRS"</link> for instructions.
      </para>
      <para>
        <screenshot>
          <screeninfo>Adding a mail account</screeninfo>
          <graphic srccredit="Adminarea postmaster - screenshot" scale="40" fileref="screenshots/add-mailaccount.png"></graphic>
        </screenshot>
      </para>
      <para>
        <emphasis>Figure: Adding a mail account.</emphasis>
      </para>
      <para>
        If you select Yes for the value of the Trusted option, any X-OTRS headers attached to an incoming message are evaluated and executed. Because the X-OTRS header can execute some actions in the ticket system, you should set the Trusted option to Yes only for known senders. X-OTRS-Headers are used by the
        <link linkend="adminarea-postmasterfilter">filter module</link> in OTRS. The X-OTRS headers are explained
        <link linkend="table-of-x-otrs-headers">in this table</link> in more detail. Any postmaster filter rules created are executed, irrespective of the Trusted option's setting.
      </para>
      <para>
        The distribution of incoming messages can be controlled if they need to be sorted by queue or by the content of the "To:" field. For the Dispatching field, if "Dispatching by selected queue" is selected, all incoming messages will be sorted into the specified queue. The address where the mail was sent to is disregarded in this case. If "Dispatching by email To: field" is selected, the system checks if a queue is linked with the address in the To: field of the incoming mail. You can link an address to a queue in the
        <link linkend="adminarea-emailaddresses">E-mail address management</link> section of the Admin page. If the address in the To: field is linked with a queue, the new message will be sorted into the linked queue. If no link is found between the address in the To: field and any queue, then the message flows into the "Raw" queue in the system, which is the
        <link linkend="Ticket:Core::PostMaster:PostmasterDefaultQueue">PostmasterDefaultQueue</link> after a default installation.
      </para>
      <para>
        All data for the mail accounts are saved in the OTRS database. The
        <filename>otrs.PostMasterMailbox.pl</filename> script, which is located in the
        <filename>bin</filename> directory of your OTRS installation, uses the settings in the database and fetches the mail. You can execute
        <filename>./bin/otrs.PostMasterMailbox.pl</filename> manually to check if all your mail settings are working properly.
      </para>
      <para>
        On a normal installation, the mail will be fetched every 10 minutes by the
        <filename>postmaster_mailbox</filename> cron job. For further information about modifying cron jobs, please refer to the
        <link linkend="cronjobs">"Setting up the cron jobs for OTRS"</link> section.
      </para>
      <note>
        <para>When fetching mail, OTRS deletes the mail from the POP or IMAP server. There is no option to also keep a copy on the server. If you want to retain a copy on the server, you should create forwarding rules on your mail server. Please consult your mail server documentation for details.</para>
      </note>
    </section>
    <section id="email-receiving-cmd">
      <title>Via command line program and procmail (otrs.PostMaster.pl)</title>
      <para>
        If you cannot use mail accounts to get the email into OTRS, the command line program
        <filename>bin/otrs.PostMaster.pl</filename> might be a way around the problem. It takes the mails via STDIN and pipes them directly into OTRS. That means email will be available in your OTRS system if the MDA (mail delivery agent, e.g. procmail) executes this program.
      </para>
      <para>
        To test
        <filename>bin/otrs.PostMaster.pl</filename> without an MDA, execute the command of the following script.
      </para>
      <para>
        <screen>linux:/opt/otrs# cd bin
          linux:/opt/otrs/bin# cat ../doc/sample_mails/test-email-1.box | ./otrs.PostMaster.pl
          linux:/opt/otrs/bin#</screen>
      </para>
      <para>
        <emphasis>Script: Testing PostMaster without the MDA.</emphasis>
      </para>
      <para>If the email is shown in the QueueView, then your setup is working.</para>
      <para>
        Procmail is a very common e-mail filter in Linux environments. It is installed on most systems. If not, have a look at the
        <ulink url="http://www.procmail.org/">
          <citetitle>procmail homepage</citetitle>
        </ulink>.
      </para>
      <para>
        To configure procmail for OTRS (based upon a procmail configured MTA such as sendmail, postfix, exim or qmail), use the
        <filename>~otrs/.procmailrc.dist</filename> file and copy it to
        <filename>.procmailrc</filename> and add the lines of the script below.
      </para>
      <para>
        <programlisting>SYS_HOME=$HOME
          PATH=/bin:/usr/bin:/usr/local/bin
          # --
          # Pipe all email into the PostMaster process.
          # --
          :0 :
          | $SYS_HOME/bin/otrs.PostMaster.pl</programlisting>
      </para>
      <para>
        <emphasis>Script: Configuring procmail for OTRS.</emphasis>
      </para>
      <para>
        All email sent to the local OTRS user will be piped into
        <filename>bin/otrs.PostMaster.pl</filename> and then shown in your QueueView.
      </para>

    </section>
    <section id="email-receiving-fetchmail">
      <title>Fetching emails via POP3 or IMAP and fetchmail for otrs.PostMaster.pl</title>
      <para>
        In order to get email from your mail server, via a POP3 or IMAP mailbox, to the OTRS machine/local OTRS account and to procmail, use
        <ulink url="http://fetchmail.berlios.de/">fetchmail</ulink>.
      </para>
      <note>
        <para>A working SMTP configuration on the OTRS machine is required.</para>
      </note>
      <para>
        You can use the
        <filename>.fetchmailrc.dist</filename> in the home directory of OTRS and copy it to
        <filename>.fetchmailrc</filename>. Modfiy/change it for your needs (see the Example 7-1 below).
      </para>
      <example id='fetchmailrc'>
        <title>.fetchmailrc</title>
        <para>
          <programlisting>#poll (mailserver) protocol POP3 user (user) password (password) is (localuser)
            poll mail.example.com protocol POP3 user joe password mama is otrs</programlisting>
        </para>

      </example>
      <para>Don't forget to set the .fetchmailrc to 710 ("chmod 710 .fetchmailrc")!</para>
      <para>
        With the
        <filename>.fetchmailrc</filename> from the Example 7-1 above, all email will be forwarded to the local OTRS account, if the command
        <command>fetchmail -a</command> is executed. Set up a cronjob with this command if you want to fetch the mails regularly.
      </para>
    </section>
    <section id="email-receiving-filter">
      <title>Filtering/dispatching by OTRS/PostMaster modules (for more complex dispatching)</title>
      <para>
        If you use the bin/otrs.PostMaster.pl or bin/otrs.PostMasterMailbox.pl method, you can insert or modify X-OTRS header entries with the PostMaster filter modules. With the X-OTRS headers, the ticket system can execute some actions on
        incoming mails, sort them into a specific queue, change the priority or change the customer ID, for example. More information about the X-OTRS headers are available in the section about
        <link linkend="adminarea-postmasterpop3-account">adding mail accounts</link> from the OTRS Admin page.
      </para>
      <para>There are some default filter modules:</para>
      <note>
        <para>The job name (e.g. $Self-&gt;{'PostMaster::PreFilterModule'}-&gt;{'JobName'}) needs to be unique!</para>
      </note>
      <para>
        Kernel::System::PostMaster::Filter::Match is a default module to match on some email header (e.g. From, To, Subject, ...). It can set new email headers (e.g. X-OTRS-Ignore: yes or X-OTRS-Queue: spam) if a filter rule matches. The jobs of the Example 7-2 can be inserted in
        <filename>Kernel/Config.pm</filename>
      </para>
      <example id='filter-module-match-example'>
        <title>Example jobs for the filter module Kernel::System::PostMaster::Filter::Match</title>
        <para>
          <programlisting># Job Name: 1-Match
            # (block/ignore all spam email with From: noreply@)
            $Self-&gt;{'PostMaster::PreFilterModule'}-&gt;{'1-Match'} = {
            Module =&gt; 'Kernel::System::PostMaster::Filter::Match',
            Match =&gt; {
            From =&gt; 'noreply@',
            },
            Set =&gt; {
            'X-OTRS-Ignore' =&gt; 'yes',
            },
            };
            # Job Name: 2-Match
            # (sort emails with From: sales@example.com and Subject: **ORDER**
            # into queue 'Order')
            $Self-&gt;{'PostMaster::PreFilterModule'}-&gt;{'2-Match'} = {
            Module =&gt; 'Kernel::System::PostMaster::Filter::Match',
            Match =&gt; {
            To =&gt; 'sales@example.com',
            Subject =&gt; '**ORDER**',
            },
            Set =&gt; {
            'X-OTRS-Queue' =&gt; 'Order',
            },
            };</programlisting>
        </para>

      </example>
      <para>
        Kernel::System::PostMaster::Filter::CMD is a default module to pipe the email into an external command. The output is given to STDOUT and if the result is true, then set new email header (e.g. X-OTRS-Ignore: yes or X-OTRS-Queue: spam). The Example 7-3 can be used in
        <filename>Kernel/Config.pm</filename>
      </para>
      <example id='filter-module-cmd-example'>
        <title>Example job for the filter module Kernel::System::PostMaster::Filter::CMD</title>
        <para>
          <programlisting># Job Name: 5-SpamAssassin
            # (SpamAssassin example setup, ignore spam emails)
            $Self-&gt;{'PostMaster::PreFilterModule'}-&gt;{'5-SpamAssassin'} = {
            Module =&gt; 'Kernel::System::PostMaster::Filter::CMD',
            CMD =&gt; '/usr/bin/spamassassin | grep -i "X-Spam-Status: yes"',
            Set =&gt; {
            'X-OTRS-Ignore' =&gt; 'yes',
            },
            };</programlisting>
        </para>

      </example>
      <para>Of course it's also possible to develop your own PostMaster filter modules.</para>

    </section>

  </section>

</section>
